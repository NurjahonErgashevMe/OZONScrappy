import logging
from parser.inn_parser import INNParser

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)

def run_inn_parser():
    """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –ò–ù–ù"""
    parser = None
    
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –ò–ù–ù –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ Ozon")
        print("üìÅ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª sellers.txt –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞
        parser = INNParser(headless=False)  # headless=True –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ —Ñ–æ–Ω–µ
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ sellers.txt
        seller_urls = parser.load_seller_urls()
        if not seller_urls:
            print("‚ùå –§–∞–π–ª sellers.txt –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç!")
            return
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(seller_urls)} –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
        
        # –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
        success = parser.parse_all_sellers()
        
        if success and parser.results:
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            parser.save_to_excel()
            
            # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            print("\n" + "="*60)
            print("üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–ê–†–°–ò–ù–ì–ê")
            print("="*60)
            
            total = len(parser.results)
            inn_found = len([r for r in parser.results if r['inn'] not in ['–ù–µ –Ω–∞–π–¥–µ–Ω–æ', '–û—à–∏–±–∫–∞']])
            
            print(f"üë• –í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤: {total}")
            print(f"üÜî –ò–ù–ù –Ω–∞–π–¥–µ–Ω —É: {inn_found} –ø—Ä–æ–¥–∞–≤—Ü–æ–≤")
            print(f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(inn_found/total*100):.1f}%")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ò–ù–ù
            successful_results = [r for r in parser.results if r['inn'] not in ['–ù–µ –Ω–∞–π–¥–µ–Ω–æ', '–û—à–∏–±–∫–∞']]
            if successful_results:
                print(f"\nüéØ –ü—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ò–ù–ù:")
                for i, result in enumerate(successful_results[:3], 1):
                    print(f"  {i}. {result['seller_name']}: {result['inn']}")
                    if result['company_name'] != '–ù–µ –Ω–∞–π–¥–µ–Ω–æ':
                        print(f"     –ö–æ–º–ø–∞–Ω–∏—è: {result['company_name']}")
            
            print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫—É 'output'")
            print("‚ú® –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            
        else:
            print("‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏")
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        if parser:
            parser.close()
            print("üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")

if __name__ == "__main__":
    run_inn_parser()