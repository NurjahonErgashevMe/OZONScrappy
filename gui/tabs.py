import os
import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
import webbrowser

class TabManager:
    def setup_ui(self):
        self.root.title("Telegram Bot Manager")
        self.root.geometry("900x700")
        self.root.minsize(800, 600)
        self.root.eval('tk::PlaceWindow . center')
        
        notebook = ttk.Notebook(self.root)
        notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        self.setup_config_tab(notebook)
        self.setup_logs_tab(notebook)
        self.setup_control_tab(notebook)
        self.setup_developer_tab(notebook)
        
        self.status_var = tk.StringVar()
        self.status_var.set("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        status_bar = ttk.Label(self.root, textvariable=self.status_var, 
                              relief=tk.SUNKEN, anchor=tk.W)
        status_bar.pack(side=tk.BOTTOM, fill=tk.X, padx=10, pady=(0, 10))
    
    def setup_config_tab(self, notebook):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        config_frame = ttk.Frame(notebook, padding="20")
        notebook.add(config_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        title_label = ttk.Label(config_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –±–æ—Ç–∞", 
                               font=('Arial', 16, 'bold'))
        title_label.grid(row=0, column=0, columnspan=2, pady=(0, 30))
        
        ttk.Label(config_frame, text="TELEGRAM_BOT_TOKEN:", 
                 font=('Arial', 12)).grid(row=1, column=0, sticky=tk.W, pady=(0, 5))
        self.token_entry = ttk.Entry(config_frame, width=70, show="*", font=('Arial', 10))
        self.token_entry.grid(row=2, column=0, columnspan=2, pady=(0, 20), sticky=(tk.W, tk.E))
        
        self.show_token_var = tk.BooleanVar()
        show_token_cb = ttk.Checkbutton(config_frame, text="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–∫–µ–Ω", 
                                       variable=self.show_token_var, 
                                       command=self.toggle_token_visibility)
        show_token_cb.grid(row=3, column=0, sticky=tk.W, pady=(0, 15))
        
        ttk.Label(config_frame, text="TELEGRAM_CHAT_ID:", 
                 font=('Arial', 12)).grid(row=4, column=0, sticky=tk.W, pady=(0, 5))
        self.chat_id_entry = ttk.Entry(config_frame, width=70, font=('Arial', 10))
        self.chat_id_entry.grid(row=5, column=0, columnspan=2, pady=(0, 25), sticky=(tk.W, tk.E))
        
        button_frame = ttk.Frame(config_frame)
        button_frame.grid(row=6, column=0, columnspan=2, pady=15)
        
        save_btn = ttk.Button(button_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=self.save_config)
        save_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        test_btn = ttk.Button(button_frame, text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", command=self.test_config)
        test_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        clear_btn = ttk.Button(button_frame, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", command=self.clear_fields)
        clear_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        load_btn = ttk.Button(button_frame, text="üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å", command=self.load_existing_config)
        load_btn.pack(side=tk.LEFT)
        
        info_frame = ttk.LabelFrame(config_frame, text="üìã –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", padding="15")
        info_frame.grid(row=7, column=0, columnspan=2, pady=25, sticky=(tk.W, tk.E))
        
        info_text = """1. –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather –≤ Telegram:
   ‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /newbot
   ‚Ä¢ –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω
   
2. –£–∑–Ω–∞–π—Ç–µ —Å–≤–æ–π Chat ID:
   ‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É @userinfobot
   ‚Ä¢ –ò–ª–∏ –Ω–∞–π–¥–∏—Ç–µ —Å–≤–æ–π ID —á–µ—Ä–µ–∑ @getmyid_bot
   
3. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø–æ–ª—è –≤—ã—à–µ
4. –ù–∞–∂–º–∏—Ç–µ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
5. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ' –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
        
        info_label = ttk.Label(info_frame, text=info_text, justify=tk.LEFT, font=('Arial', 10))
        info_label.pack()
        
        config_frame.columnconfigure(0, weight=1)
    
    def setup_logs_tab(self, notebook):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ –ª–æ–≥–æ–≤"""
        logs_frame = ttk.Frame(notebook, padding="10")
        notebook.add(logs_frame, text="–õ–æ–≥–∏")
        
        ttk.Label(logs_frame, text="–õ–æ–≥–∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", 
                 font=('Arial', 14, 'bold')).pack(pady=(0, 10))
        
        log_buttons_frame = ttk.Frame(logs_frame)
        log_buttons_frame.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Button(log_buttons_frame, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏", 
                  command=self.clear_logs).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(log_buttons_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏", 
                  command=self.save_logs).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(log_buttons_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", 
                  command=self.refresh_logs).pack(side=tk.LEFT)
        
        self.log_text = scrolledtext.ScrolledText(logs_frame, wrap=tk.WORD, 
                                                 font=('Consolas', 10), 
                                                 bg='#1e1e1e', fg='#ffffff',
                                                 insertbackground='white')
        self.log_text.pack(fill=tk.BOTH, expand=True)
        
        self.log_text.tag_config("INFO", foreground="#00ff00")
        self.log_text.tag_config("WARNING", foreground="#ffff00")
        self.log_text.tag_config("ERROR", foreground="#ff0000")
        self.log_text.tag_config("DEBUG", foreground="#00ffff")
    
    def setup_control_tab(self, notebook):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º"""
        control_frame = ttk.Frame(notebook, padding="20")
        notebook.add(control_frame, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—ã–π —Ñ—Ä–µ–π–º
        canvas = tk.Canvas(control_frame)
        scrollbar = ttk.Scrollbar(control_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas)
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–∫—Ä–æ–ª–ª–∏–Ω–≥ –∫ –∫–æ–ª–µ—Å—É –º—ã—à–∏
        def _on_mousewheel(event):
            canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        canvas.bind_all("<MouseWheel>", _on_mousewheel)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        def configure_scroll_region(event):
            canvas.configure(scrollregion=canvas.bbox("all"))
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–æ–≥–æ —Ñ—Ä–µ–π–º–∞ —Ä–∞–≤–Ω–æ–π —à–∏—Ä–∏–Ω–µ canvas
            canvas_width = event.width
            canvas.itemconfig(canvas.create_window((0, 0), window=scrollable_frame, anchor="nw"), width=canvas_width)
        
        canvas.bind('<Configure>', configure_scroll_region)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ttk.Label(scrollable_frame, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Telegram –±–æ—Ç–æ–º", 
                 font=('Arial', 16, 'bold')).pack(pady=(0, 30))
        
        # –°–µ–∫—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
        status_frame = ttk.LabelFrame(scrollable_frame, text="–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞", padding="15")
        status_frame.pack(fill=tk.X, pady=(0, 20))
        
        self.bot_status_var = tk.StringVar()
        self.bot_status_var.set("üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        ttk.Label(status_frame, textvariable=self.bot_status_var, 
                 font=('Arial', 14, 'bold')).pack()
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
        control_buttons_frame = ttk.Frame(scrollable_frame)
        control_buttons_frame.pack(pady=20)
        
        self.start_btn = ttk.Button(control_buttons_frame, text="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", 
                                   command=self.start_bot, state=tk.NORMAL)
        self.start_btn.pack(side=tk.LEFT, padx=(0, 15))
        
        self.stop_btn = ttk.Button(control_buttons_frame, text="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞", 
                                  command=self.stop_bot, state=tk.DISABLED)
        self.stop_btn.pack(side=tk.LEFT, padx=(0, 15))
        
        self.restart_btn = ttk.Button(control_buttons_frame, text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", 
                                     command=self.restart_bot, state=tk.DISABLED)
        self.restart_btn.pack(side=tk.LEFT)
        
        # –ù–æ–≤–∞—è —Å–µ–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–∞—Ä—Å–µ—Ä–∞
        parser_settings_frame = ttk.LabelFrame(scrollable_frame, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", 
                                              padding="20")
        parser_settings_frame.pack(fill=tk.X, pady=20)
        
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_row1 = ttk.Frame(parser_settings_frame)
        settings_row1.pack(fill=tk.X, pady=(0, 15))
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫
        ttk.Label(settings_row1, text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤:", 
                 font=('Arial', 11)).pack(side=tk.LEFT)
        self.max_sellers_var = tk.StringVar(value="150")
        max_sellers_entry = ttk.Entry(settings_row1, textvariable=self.max_sellers_var, 
                                     width=10, font=('Arial', 10))
        max_sellers_entry.pack(side=tk.LEFT, padx=(10, 20))
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Ä–∫–µ—Ä–æ–≤
        # ttk.Label(settings_row1, text="–í–æ—Ä–∫–µ—Ä—ã:", 
        #          font=('Arial', 11)).pack(side=tk.LEFT)
        # self.workers_var = tk.StringVar(value="3")
        # workers_entry = ttk.Entry(settings_row1, textvariable=self.workers_var, 
        #                          width=10, font=('Arial', 10))
        # workers_entry.pack(side=tk.LEFT, padx=(10, 0))
        
        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_row2 = ttk.Frame(parser_settings_frame)
        settings_row2.pack(fill=tk.X, pady=(0, 15))
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–ª–æ—Å—Ç—ã—Ö —Å–∫—Ä–æ–ª–ª–æ–≤
        # ttk.Label(settings_row2, text="–ú–∞–∫—Å. —Ö–æ–ª–æ—Å—Ç—ã—Ö —Å–∫—Ä–æ–ª–ª–æ–≤:", 
        #          font=('Arial', 11)).pack(side=tk.LEFT)
        # self.max_idle_scrolls_var = tk.StringVar(value="100")
        # idle_scrolls_entry = ttk.Entry(settings_row2, textvariable=self.max_idle_scrolls_var, 
        #                               width=10, font=('Arial', 10))
        # idle_scrolls_entry.pack(side=tk.LEFT, padx=(10, 20))
        
        # –ó–∞–¥–µ—Ä–∂–∫–∞ —Å–∫—Ä–æ–ª–ª–∞
        ttk.Label(settings_row2, text="–ó–∞–¥–µ—Ä–∂–∫–∞ —Å–∫—Ä–æ–ª–ª–∞ (—Å–µ–∫):", 
                 font=('Arial', 11)).pack(side=tk.LEFT)
        self.scroll_delay_var = tk.StringVar(value="2.0")
        scroll_delay_entry = ttk.Entry(settings_row2, textvariable=self.scroll_delay_var, 
                                      width=10, font=('Arial', 10))
        scroll_delay_entry.pack(side=tk.LEFT, padx=(10, 0))
        
        # –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_row3 = ttk.Frame(parser_settings_frame)
        settings_row3.pack(fill=tk.X, pady=(0, 15))
        
        # –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏
        ttk.Label(settings_row3, text="–¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ (—Å–µ–∫):", 
                 font=('Arial', 11)).pack(side=tk.LEFT)
        self.load_timeout_var = tk.StringVar(value="30")
        load_timeout_entry = ttk.Entry(settings_row3, textvariable=self.load_timeout_var, 
                                      width=10, font=('Arial', 10))
        load_timeout_entry.pack(side=tk.LEFT, padx=(10, 20))
        
        # –†–µ–∂–∏–º –±—Ä–∞—É–∑–µ—Ä–∞ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
        # ttk.Label(settings_row3, text="–°–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º –±—Ä–∞—É–∑–µ—Ä–∞:", 
        #          font=('Arial', 11)).pack(side=tk.LEFT)
        # self.headless_var = tk.BooleanVar(value=False)  # False = –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä
        # headless_cb = ttk.Checkbutton(settings_row3, variable=self.headless_var)
        # headless_cb.pack(side=tk.LEFT, padx=(10, 0))
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–∞—Ä—Å–µ—Ä–∞
        parser_buttons_frame = ttk.Frame(parser_settings_frame)
        parser_buttons_frame.pack(pady=(15, 0))
        
        save_parser_btn = ttk.Button(parser_buttons_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", 
                                    command=self.save_parser_settings)
        save_parser_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        load_parser_btn = ttk.Button(parser_buttons_frame, text="üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", 
                                    command=self.load_parser_settings)
        load_parser_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        reset_parser_btn = ttk.Button(parser_buttons_frame, text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å", 
                                     command=self.reset_parser_settings)
        reset_parser_btn.pack(side=tk.LEFT)
        
        # –°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        parser_info_frame = ttk.LabelFrame(parser_settings_frame, text="üìã –û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫", 
                                          padding="10")
        parser_info_frame.pack(fill=tk.X, pady=(20, 0))
        
        info_text = """‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫ –¥–ª—è —Å–±–æ—Ä–∞
‚Ä¢ –í–æ—Ä–∫–µ—Ä—ã - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ò–ù–ù (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 3-5)
‚Ä¢ –ú–∞–∫—Å. —Ö–æ–ª–æ—Å—Ç—ã—Ö —Å–∫—Ä–æ–ª–ª–æ–≤ - —Å–∫–æ–ª—å–∫–æ —Å–∫—Ä–æ–ª–ª–æ–≤ –±–µ–∑ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π
‚Ä¢ –ó–∞–¥–µ—Ä–∂–∫–∞ —Å–∫—Ä–æ–ª–ª–∞ - –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–∫—Ä–æ–ª–ª–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —á–µ–ª–æ–≤–µ–∫–∞)
‚Ä¢ –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ - –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
‚Ä¢ –°–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º –±—Ä–∞—É–∑–µ—Ä–∞ - –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω, –±—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å–∫—Ä—ã—Ç–æ (--headless)"""
        
        info_label = ttk.Label(parser_info_frame, text=info_text, justify=tk.LEFT, 
                              font=('Arial', 9), wraplength=750)
        info_label.pack(anchor=tk.W)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_info_frame = ttk.LabelFrame(scrollable_frame, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", 
                                          padding="15")
        config_info_frame.pack(fill=tk.X, pady=20)
        
        self.config_info_var = tk.StringVar()
        self.config_info_var.set("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        ttk.Label(config_info_frame, textvariable=self.config_info_var, 
                 font=('Arial', 10)).pack()
        
        self.update_config_info()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self.load_parser_settings()
    
    def setup_developer_tab(self, notebook):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        dev_frame = ttk.Frame(notebook, padding="20")
        notebook.add(dev_frame, text="–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫")
        
        title_label = ttk.Label(dev_frame, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ", 
                               font=('Arial', 16, 'bold'))
        title_label.pack(pady=(0, 30))
        
        info_frame = ttk.LabelFrame(dev_frame, text="–ö–æ–Ω—Ç–∞–∫—Ç—ã –∏ —Å—Å—ã–ª–∫–∏", padding="20")
        info_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        link_style = ttk.Style()
        link_style.configure("Link.TLabel", foreground="blue", font=('Arial', 12, 'underline'))
        
        ttk.Label(info_frame, text="Telegram:", font=('Arial', 12, 'bold')).pack(anchor=tk.W, pady=(0, 5))
        telegram_link = ttk.Label(info_frame, text="@NurjahonErgashevMe", style="Link.TLabel", cursor="hand2")
        telegram_link.pack(anchor=tk.W, padx=20, pady=(0, 20))
        telegram_link.bind("<Button-1>", lambda e: webbrowser.open("https://t.me/NurjahonErgashevMe"))
        
        ttk.Label(info_frame, text="Kwork:", font=('Arial', 12, 'bold')).pack(anchor=tk.W, pady=(0, 5))
        kwork_link = ttk.Label(info_frame, text="https://kwork.ru/user/nurjahonergashevme", 
                              style="Link.TLabel", cursor="hand2")
        kwork_link.pack(anchor=tk.W, padx=20, pady=(0, 20))
        kwork_link.bind("<Button-1>", lambda e: webbrowser.open("https://kwork.ru/user/nurjahonergashevme"))
        
        ttk.Label(info_frame, text="–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:", font=('Arial', 12, 'bold')).pack(anchor=tk.W, pady=(0, 5))
        ttk.Label(info_frame, text="Telegram Bot Manager v1.0", font=('Arial', 11)).pack(anchor=tk.W, padx=20)
        ttk.Label(info_frame, text="¬© 2026 Nurjahon Ergashev", font=('Arial', 11)).pack(anchor=tk.W, padx=20, pady=(0, 20))
        
        logo_frame = ttk.Frame(dev_frame)
        logo_frame.pack(pady=20)
        ttk.Label(logo_frame, text="[–õ–û–ì–û–¢–ò–ü]", font=('Arial', 24), 
                 foreground="gray", borderwidth=2, relief="solid", 
                 width=15).pack()
    
    def save_parser_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–∞—Ä—Å–µ—Ä–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª"""
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
            try:
                max_sellers = int(self.max_sellers_var.get())
                # workers = int(self.workers_var.get())
                # max_idle_scrolls = int(self.max_idle_scrolls_var.get())
                scroll_delay = float(self.scroll_delay_var.get())
                load_timeout = int(self.load_timeout_var.get())
                
                # if max_sellers <= 0 or workers <= 0 or max_idle_scrolls <= 0 or scroll_delay < 0 or load_timeout <= 0:
                #     raise ValueError("–ó–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏")
                    
            except ValueError as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
                return
            
            # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ñ–∏–≥
            config_lines = []
            config_file = "config.txt"
            
            if os.path.exists(config_file):
                with open(config_file, "r", encoding="utf-8") as f:
                    config_lines = f.readlines()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞
            parser_settings = {
                "MAX_SELLERS": str(max_sellers),
                # "WORKERS_COUNT": str(workers),
                # "MAX_IDLE_SCROLLS": str(max_idle_scrolls),
                "SCROLL_DELAY": str(scroll_delay),
                "LOAD_TIMEOUT": str(load_timeout),
                # "HEADLESS": "False" if self.headless_var.get() else "True"
            }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
            updated_lines = []
            updated_keys = set()
            
            for line in config_lines:
                line = line.strip()
                if '=' in line and not line.startswith('#'):
                    key = line.split('=')[0].strip()
                    if key in parser_settings:
                        updated_lines.append(f"{key}={parser_settings[key]}\n")
                        updated_keys.add(key)
                    else:
                        updated_lines.append(line + "\n")
                else:
                    updated_lines.append(line + "\n")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –±—ã–ª–æ –≤ —Ñ–∞–π–ª–µ
            if not updated_keys:  # –ï—Å–ª–∏ —Å–µ–∫—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞ –Ω–µ –±—ã–ª–æ
                updated_lines.append("\n# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n")
            
            for key, value in parser_settings.items():
                if key not in updated_keys:
                    updated_lines.append(f"{key}={value}\n")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥
            with open(config_file, "w", encoding="utf-8") as f:
                f.writelines(updated_lines)
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            self.status_var.set("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            if hasattr(self, 'logger'):
                self.logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ config.txt")
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
            if hasattr(self, 'logger'):
                self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
    
    def load_parser_settings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–∞—Ä—Å–µ—Ä–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        try:
            config_file = "config.txt"
            if not os.path.exists(config_file):
                return
            
            with open(config_file, "r", encoding="utf-8") as f:
                for line in f:
                    line = line.strip()
                    if '=' in line and not line.startswith('#'):
                        key, value = line.split('=', 1)
                        key = key.strip()
                        value = value.strip()
                        
                        if key == "MAX_SELLERS":
                            self.max_sellers_var.set(value)
                        # elif key == "WORKERS_COUNT":
                        #     self.workers_var.set(value)
                        # elif key == "MAX_IDLE_SCROLLS":
                        #     self.max_idle_scrolls_var.set(value)
                        elif key == "SCROLL_DELAY":
                            self.scroll_delay_var.set(value)
                        elif key == "LOAD_TIMEOUT":
                            self.load_timeout_var.set(value)
                        # elif key == "HEADLESS":
                        #     self.headless_var.set(value.lower() == "false")
            
            if hasattr(self, 'logger'):
                self.logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ config.txt")
                
        except Exception as e:
            if hasattr(self, 'logger'):
                self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
    
    def reset_parser_settings(self):
        """–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–∞—Ä—Å–µ—Ä–∞ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        self.max_sellers_var.set("150")
        # self.workers_var.set("3")
        # self.max_idle_scrolls_var.set("100")
        self.scroll_delay_var.set("2.0")
        self.load_timeout_var.set("30")
        # self.headless_var.set(False)
        
        self.status_var.set("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        if hasattr(self, 'logger'):
            self.logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    
    def clear_fields(self):
        self.token_entry.delete(0, tk.END)
        self.chat_id_entry.delete(0, tk.END)
        self.status_var.set("–ü–æ–ª—è –æ—á–∏—â–µ–Ω—ã")
        self.update_config_info()
        if hasattr(self, 'logger'):
            self.logger.info("–ü–æ–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—á–∏—â–µ–Ω—ã")
    
    def save_logs(self):
        try:
            logs_content = self.log_text.get(1.0, tk.END)
            from datetime import datetime
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"logs_{timestamp}.txt"
            
            with open(filename, "w", encoding="utf-8") as f:
                f.write(logs_content)
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
            if hasattr(self, 'logger'):
                self.logger.info(f"–õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏: {e}")
            if hasattr(self, 'logger'):
                self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
    
    def refresh_logs(self):
        if hasattr(self, 'logger'):
            self.logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–≥–æ–≤...")