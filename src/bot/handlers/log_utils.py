import logging
import asyncio
import time

logger = logging.getLogger('bot.log_utils')

class LogUpdater:
    def __init__(self, bot, chat_id, message_id=None):
        self.bot = bot
        self.chat_id = chat_id
        self.message_id = message_id
        self.log_buffer = []
        self.buffer_size = 15
        self.max_message_length = 4000
        self.last_update_time = 0
        self.update_interval = 2.0
        self.too_many_requests_count = 0

    async def init(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–æ–≤"""
        if not self.message_id:
            msg = await self.bot.send_message(
                self.chat_id,
                "<pre>üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–æ–≤...</pre>",
                parse_mode="HTML"
            )
            self.message_id = msg.message_id

    async def add_log(self, log_entry):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        # –£–ø—Ä–æ—â–∞–µ–º –ª–æ–≥ (—É–±–∏—Ä–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏)
        clean_log = log_entry.split(" - ", 3)[-1] if " - " in log_entry else log_entry
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π - –æ—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞
        if "====" in clean_log or "‚ñ¨‚ñ¨‚ñ¨" in clean_log:
            self.log_buffer = []
        
        self.log_buffer.append(clean_log)
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –±—É—Ñ–µ—Ä–∞
        if len(self.log_buffer) > self.buffer_size:
            self.log_buffer.pop(0)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        log_text = "\n".join(self.log_buffer)
        
        # –û–±—Ä–µ–∑–∞–µ–º –¥–æ –ª–∏–º–∏—Ç–∞ Telegram
        if len(log_text) > self.max_message_length:
            log_text = log_text[-self.max_message_length:]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç Too Many Requests
        await self._safe_update(log_text)

    async def _safe_update(self, log_text):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        current_time = time.time()
        if current_time - self.last_update_time < self.update_interval:
            return
            
        try:
            await self.bot.edit_message_text(
                chat_id=self.chat_id,
                message_id=self.message_id,
                text=f"<pre>{log_text}</pre>",
                parse_mode="HTML"
            )
            self.last_update_time = current_time
            self.too_many_requests_count = 0
        except Exception as e:
            if "Too Many Requests" in str(e):
                self.too_many_requests_count += 1
                self.update_interval = min(10.0, 2.0 + self.too_many_requests_count)
                await asyncio.sleep(5)
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ–≤: {str(e)}")

    async def final_message(self, message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            await self.bot.edit_message_text(
                chat_id=self.chat_id,
                message_id=self.message_id,
                text=f"<pre>{message}</pre>",
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")