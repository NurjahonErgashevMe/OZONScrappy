import logging
from aiogram import Dispatcher, F, Bot
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from src.bot.handlers.base import (
    start_command,
    parse_seller_products,
    parse_inn_command,
    parse_products_inn_command,
    parse_category_inn_command  # –ù–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç
)
from src.bot.handlers.seller_handling import handle_seller_url
from src.bot.handlers.inn_handling import handle_inn_urls
from src.bot.handlers.category_handling import handle_category_url  # –ù–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç
from src.bot.states import ParserStates
from src.utils import load_config

logger = logging.getLogger('bot.register_handlers')

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = load_config("config.txt")

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ALLOWED_CHAT_ID, –µ—Å–ª–∏ TELEGRAM_CHAT_ID –∑–∞–¥–∞–Ω
ALLOWED_CHAT_ID = None
chat_id = config.get("TELEGRAM_CHAT_ID", "")
if chat_id:
    try:
        ALLOWED_CHAT_ID = int(chat_id)
        logger.info(f"ALLOWED_CHAT_ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {ALLOWED_CHAT_ID}")
    except ValueError:
        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π TELEGRAM_CHAT_ID: {chat_id}, –±–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è chat_id")
else:
    logger.info("TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π –≤ config.txt, –±–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è chat_id")

async def check_chat_id(message: Message) -> bool:
    """–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ chat_id"""
    if ALLOWED_CHAT_ID is None:
        return True  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É, –µ—Å–ª–∏ chat_id –Ω–µ –∑–∞–¥–∞–Ω
    if message.chat.id != ALLOWED_CHAT_ID:
        await message.reply("–í–∞–º –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return False
    return True

def create_handler(handler):
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π chat_id"""
    async def wrapped_handler(message: Message, state: FSMContext = None):
        if not await check_chat_id(message):
            return
        if state:
            await handler(message, state)
        else:
            await handler(message)
    return wrapped_handler

def register_handlers(dp: Dispatcher, bot: Bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π chat_id"""
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
    dp.message.register(
        create_handler(start_command), 
        Command("start")
    )
    dp.message.register(
        create_handler(parse_seller_products), 
        F.text == "üîç –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–∞ –∏ —Ç–æ–≤–∞—Ä—ã"
    )
    dp.message.register(
        create_handler(parse_inn_command), 
        F.text == "üÜî –ü–∞—Ä—Å–∏–Ω–≥ –ò–ù–ù –ø—Ä–æ–¥–∞–≤—Ü–æ–≤"
    )
    dp.message.register(
        create_handler(parse_products_inn_command), 
        F.text == "üì¶ –ü–∞—Ä—Å–∏–Ω–≥ –ò–ù–ù –∏–∑ —Ç–æ–≤–∞—Ä–æ–≤"
    )
    # –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    dp.message.register(
        create_handler(parse_category_inn_command), 
        F.text == "üè∑Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –ò–ù–ù –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    dp.message.register(
        create_handler(lambda m, s: handle_seller_url(m, s, bot)),
        ParserStates.waiting_seller_url
    )
    dp.message.register(
        create_handler(lambda m, s: handle_inn_urls(m, s, bot, mode='sellers')),
        ParserStates.waiting_seller_urls_for_inn
    )
    dp.message.register(
        create_handler(lambda m, s: handle_inn_urls(m, s, bot, mode='products')),
        ParserStates.waiting_product_urls_for_inn
    )
    # –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    dp.message.register(
        create_handler(lambda m, s: handle_category_url(m, s, bot)),
        ParserStates.waiting_category_url
    )

    logger.info("–í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")