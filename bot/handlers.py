import logging
import asyncio
from aiogram import F, types
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from bot.keyboards import main_keyboard
from bot.states import ParserStates
from parse_seller_and_products import parse_seller_and_products
from parse_inn import run_inn_parser
from parse_products_inn import run_product_inn_parser

logger = logging.getLogger(__name__)

async def start_command(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö —Å Ozon.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=main_keyboard()
    )

async def parse_seller_products(message: types.Message, state: FSMContext):
    await state.set_state(ParserStates.waiting_seller_url)
    await message.answer(
        "üîç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞ Ozon.\n"
        "–ü—Ä–∏–º–µ—Ä: https://www.ozon.ru/seller/trade-electronics-183434/"
    )

async def handle_seller_url(message: types.Message, state: FSMContext):
    url = message.text
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è URL
    if not url.startswith('https://www.ozon.ru/seller/'):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    await message.answer(f"‚è≥ –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–∞: {url}...")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        result = await asyncio.to_thread(parse_seller_and_products, url, True)
        
        if result:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            response = (
                f"üè™ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥–∞–≤—Ü–µ:*\n"
                f"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {result['seller'].get('seller_name', 'N/A')}\n"
                f"‚Ä¢ –ü—Ä–µ–º–∏—É–º: {'‚úÖ –î–∞' if result['seller'].get('is_premium') else '‚ùå –ù–µ—Ç'}\n"
                f"‚Ä¢ –ó–∞–∫–∞–∑–æ–≤: {result['seller'].get('orders_count', 'N/A')}\n"
                f"‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç —Å: {result['seller'].get('working_since', 'N/A')}\n"
                f"‚Ä¢ –†–µ–π—Ç–∏–Ω–≥: {result['seller'].get('average_rating', 'N/A')} "
                f"(–æ—Ç–∑—ã–≤–æ–≤: {result['seller'].get('reviews_count', 'N/A')})\n"
                f"‚Ä¢ –ö–æ–º–ø–∞–Ω–∏—è: {result['seller'].get('company_name', 'N/A')}\n"
                f"‚Ä¢ –ò–ù–ù: {result['seller'].get('inn', 'N/A')}\n\n"
                f"üì¶ *–¢–æ–≤–∞—Ä—ã:* {len(result['products']) if result['products'] else 0} —Å–ø–∞—Ä—Å–µ–Ω–æ"
            )
            await message.answer(response, parse_mode="Markdown")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–≤—Ü–µ.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {str(e)}")
    
    await state.clear()

async def parse_inn_command(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("üÜî –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –ò–ù–ù –ø—Ä–æ–¥–∞–≤—Ü–æ–≤...")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        result = await asyncio.to_thread(run_inn_parser)
        await message.answer(result[:4000])  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ò–ù–ù: {e}")
        await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def parse_products_inn_command(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("üì¶ –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –ò–ù–ù –∏–∑ —Ç–æ–≤–∞—Ä–æ–≤...")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        result = await asyncio.to_thread(run_product_inn_parser)
        await message.answer(result[:4000])  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ò–ù–ù –∏–∑ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")