import logging
import asyncio
import os
import queue
from aiogram import types
from aiogram.fsm.context import FSMContext
from bot.keyboards import main_keyboard
from bot.telegram_logger import TelegramLogsHandler
from parse_inn import run_inn_parser_from_list
from parse_products_inn import run_product_inn_parser_from_list

logger = logging.getLogger('bot.inn_handlers')

async def handle_inn_urls(message: types.Message, state: FSMContext, bot, mode='sellers'):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_keyboard())
        return
    
    urls = [url.strip() for url in message.text.split('\n') if url.strip()]
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–æ–≤
    telegram_logger = TelegramLogsHandler(bot, message.chat.id)
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if mode == 'sellers':
            await telegram_logger.add_log(f"üÜî –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –ò–ù–ù –¥–ª—è {len(urls)} –ø—Ä–æ–¥–∞–≤—Ü–æ–≤")
        else:
            await telegram_logger.add_log(f"üì¶ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –ò–ù–ù –¥–ª—è {len(urls)} —Ç–æ–≤–∞—Ä–æ–≤")
        
        # –î–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤: –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–æ–≤–∞—Ä—É
        results = []
        
        if mode == 'sellers':
            result_message, _, filepath = await asyncio.to_thread(
                run_inn_parser_from_list, 
                urls
            )
        else:  # mode == 'products'
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∏ —Å–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            result_message, _, filepath, results = await asyncio.to_thread(
                run_product_inn_parser_from_list, 
                urls
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–æ–≤–∞—Ä—É
            for i, result in enumerate(results, 1):
                seller_name = result.get('seller_name', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')
                company_name = result.get('company_name', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')
                inn = result.get('inn', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')
                product_url = result.get('product_url', '')
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                result_msg = (
                    f"‚úì –¢–æ–≤–∞—Ä {i} –æ–±—Ä–∞–±–æ—Ç–∞–Ω:\n"
                    f"–ü—Ä–æ–¥–∞–≤–µ—Ü: {seller_name}\n"
                    f"–ö–æ–º–ø–∞–Ω–∏—è: {company_name}\n"
                    f"–ò–ù–ù: {inn}\n"
                    f"–°—Å—ã–ª–∫–∞: {product_url}"
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –ª–æ–≥–≥–µ—Ä (–±—É–¥–µ—Ç –æ—á–∏—â–µ–Ω–æ –æ—Ç HTML)
                await telegram_logger.send_result_message(result_msg)
        
        # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ª–æ–≥–æ–≤
        await asyncio.sleep(1)
        await telegram_logger.add_log(result_message)
        
        if filepath and os.path.exists(filepath):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            with open(filepath, 'rb') as file:
                await message.answer_document(
                    types.BufferedInputFile(
                        file.read(),
                        filename=os.path.basename(filepath)
                    )
                )
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
            async def delete_file():
                await asyncio.sleep(10)
                try:
                    os.remove(filepath)
                    logger.info(f"–§–∞–π–ª {filepath} —É–¥–∞–ª–µ–Ω")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")
            asyncio.create_task(delete_file())
            
            await telegram_logger.final_message("‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        else:
            await telegram_logger.final_message(result_message)
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard())
            
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        await telegram_logger.add_log(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        await telegram_logger.final_message(f"üí• –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ", reply_markup=main_keyboard())
    finally:
        await telegram_logger.stop()
        await state.clear()