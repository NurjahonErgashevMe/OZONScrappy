import logging
import asyncio
import os
from aiogram import types
from aiogram.fsm.context import FSMContext
from parse_seller_and_products import parse_seller_and_products
from bot.keyboards import main_keyboard
from bot.telegram_logger import TelegramLogsHandler

logger = logging.getLogger('bot.seller_handlers')

async def handle_seller_url(message: types.Message, state: FSMContext, bot):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_keyboard())
        return
    
    url = message.text
    if not url.startswith('https://www.ozon.ru/seller/'):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–æ–≤
    telegram_logger = TelegramLogsHandler(bot, message.chat.id)
    
    try:
        await telegram_logger.add_log(f"‚è≥ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–∞: {url}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –±–µ–∑ callback
        result = await asyncio.to_thread(
            parse_seller_and_products, 
            url, 
            True,
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–∞–≤—Ü–µ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if result and result.get('seller'):
            seller_info = result['seller_info']
            await telegram_logger.send_result_message(seller_info)
        
        if result and result.get('excel_path'):
            await telegram_logger.add_log("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            with open(result['excel_path'], 'rb') as file:
                await message.answer_document(
                    types.BufferedInputFile(
                        file.read(),
                        filename=os.path.basename(result['excel_path'])
                    )
                )
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
            async def delete_file():
                await asyncio.sleep(10)
                try:
                    os.remove(result['excel_path'])
                    logger.info(f"–§–∞–π–ª {result['excel_path']} —É–¥–∞–ª–µ–Ω")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")
            asyncio.create_task(delete_file())
            
            await telegram_logger.final_message("‚úÖ –ì–æ—Ç–æ–≤–æ! –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        else:
            error_msg = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await telegram_logger.add_log(f"‚ùå –û—à–∏–±–∫–∞: {error_msg}")
            await telegram_logger.final_message(f"‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π: {error_msg}")
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard())
            
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        await telegram_logger.add_log(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        await telegram_logger.final_message(f"üí• –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ", reply_markup=main_keyboard())
    finally:
        await telegram_logger.stop()
        await state.clear()