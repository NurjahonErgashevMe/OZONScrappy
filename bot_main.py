import logging
from aiogram import Bot, Dispatcher
from aiogram import types, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from bot.handlers import (
    start_command,
    parse_seller_products,
    handle_seller_url,
    parse_inn_command,
    parse_products_inn_command
)
from bot.states import ParserStates
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

async def main():
    bot = Bot(token=TOKEN)
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dp.message.register(start_command, Command("start"))
    dp.message.register(parse_seller_products, F.text == "üîç –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–∞ –∏ —Ç–æ–≤–∞—Ä—ã")
    dp.message.register(parse_inn_command, F.text == "üÜî –ü–∞—Ä—Å–∏–Ω–≥ –ò–ù–ù –ø—Ä–æ–¥–∞–≤—Ü–æ–≤")
    dp.message.register(parse_products_inn_command, F.text == "üì¶ –ü–∞—Ä—Å–∏–Ω–≥ –ò–ù–ù –∏–∑ —Ç–æ–≤–∞—Ä–æ–≤")
    dp.message.register(handle_seller_url, ParserStates.waiting_seller_url)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())