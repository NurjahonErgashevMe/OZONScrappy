import tkinter as tk
from tkinter import messagebox, ttk, scrolledtext
import os
import sys
import threading
import logging
import asyncio
from datetime import datetime
from pathlib import Path
import queue
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from src.bot.register_handlers import register_handlers
from src.utils import load_config

class LogHandler(logging.Handler):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ GUI"""
    def __init__(self, log_queue):
        super().__init__()
        self.log_queue = log_queue
    
    def emit(self, record):
        log_entry = self.format(record)
        self.log_queue.put(log_entry)

class TelegramBotApp:
    def __init__(self):
        self.root = tk.Tk()
        self.log_queue = queue.Queue()
        self.setup_logging()
        self.setup_ui()
        self.load_existing_config()
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –±–æ—Ç–∞
        self.bot = None
        self.dp = None
        self.bot_task = None
        self.bot_loop = None
        self.is_bot_running = False
        
        # –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ–≤
        self.update_logs()
    
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä
        self.logger = logging.getLogger()
        self.logger.setLevel(logging.INFO)
        
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        for handler in self.logger.handlers[:]:
            self.logger.removeHandler(handler)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è GUI
        gui_handler = LogHandler(self.log_queue)
        gui_handler.setFormatter(formatter)
        self.logger.addHandler(gui_handler)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∞–π–ª–∞
        try:
            file_handler = logging.FileHandler('bot.log', encoding='utf-8')
            file_handler.setFormatter(formatter)
            self.logger.addHandler(file_handler)
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤
    
    def get_app_dir(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∑–∞–ø—É—Å–∫–∞–µ–º—ã–º —Ñ–∞–π–ª–æ–º"""
        if getattr(sys, 'frozen', False):
            return os.path.dirname(sys.executable)
        else:
            return os.path.dirname(os.path.abspath(__file__))
    
    def get_config_path(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É config.txt"""
        return os.path.join(self.get_app_dir(), "config.txt")
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.root.title("Telegram Bot Manager")
        self.root.geometry("900x700")
        self.root.minsize(800, 600)
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        self.root.eval('tk::PlaceWindow . center')
        
        # –°–æ–∑–¥–∞–µ–º notebook –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        notebook = ttk.Notebook(self.root)
        notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.setup_config_tab(notebook)
        
        # –í–∫–ª–∞–¥–∫–∞ –ª–æ–≥–æ–≤
        self.setup_logs_tab(notebook)
        
        # –í–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
        self.setup_control_tab(notebook)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_var = tk.StringVar()
        self.status_var.set("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        status_bar = ttk.Label(self.root, textvariable=self.status_var, 
                              relief=tk.SUNKEN, anchor=tk.W)
        status_bar.pack(side=tk.BOTTOM, fill=tk.X, padx=10, pady=(0, 10))
    
    def setup_config_tab(self, notebook):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        config_frame = ttk.Frame(notebook, padding="20")
        notebook.add(config_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(config_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –±–æ—Ç–∞", 
                               font=('Arial', 16, 'bold'))
        title_label.grid(row=0, column=0, columnspan=2, pady=(0, 30))
        
        # –ü–æ–ª–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞
        ttk.Label(config_frame, text="TELEGRAM_BOT_TOKEN:", 
                 font=('Arial', 12)).grid(row=1, column=0, sticky=tk.W, pady=(0, 5))
        self.token_entry = ttk.Entry(config_frame, width=70, show="*", font=('Arial', 10))
        self.token_entry.grid(row=2, column=0, columnspan=2, pady=(0, 20), sticky=(tk.W, tk.E))
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å —Ç–æ–∫–µ–Ω
        self.show_token_var = tk.BooleanVar()
        show_token_cb = ttk.Checkbutton(config_frame, text="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–∫–µ–Ω", 
                                       variable=self.show_token_var, 
                                       command=self.toggle_token_visibility)
        show_token_cb.grid(row=3, column=0, sticky=tk.W, pady=(0, 15))
        
        # –ü–æ–ª–µ –¥–ª—è chat_id
        ttk.Label(config_frame, text="TELEGRAM_CHAT_ID:", 
                 font=('Arial', 12)).grid(row=4, column=0, sticky=tk.W, pady=(0, 5))
        self.chat_id_entry = ttk.Entry(config_frame, width=70, font=('Arial', 10))
        self.chat_id_entry.grid(row=5, column=0, columnspan=2, pady=(0, 25), sticky=(tk.W, tk.E))
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = ttk.Frame(config_frame)
        button_frame.grid(row=6, column=0, columnspan=2, pady=15)
        
        save_btn = ttk.Button(button_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=self.save_config)
        save_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        test_btn = ttk.Button(button_frame, text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", command=self.test_config)
        test_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        clear_btn = ttk.Button(button_frame, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", command=self.clear_fields)
        clear_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        load_btn = ttk.Button(button_frame, text="üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å", command=self.load_existing_config)
        load_btn.pack(side=tk.LEFT)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø–æ–ª–µ
        info_frame = ttk.LabelFrame(config_frame, text="üìã –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", padding="15")
        info_frame.grid(row=7, column=0, columnspan=2, pady=25, sticky=(tk.W, tk.E))
        
        info_text = """1. –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather –≤ Telegram:
   ‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /newbot
   ‚Ä¢ –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω
   
2. –£–∑–Ω–∞–π—Ç–µ —Å–≤–æ–π Chat ID:
   ‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É @userinfobot
   ‚Ä¢ –ò–ª–∏ –Ω–∞–π–¥–∏—Ç–µ —Å–≤–æ–π ID —á–µ—Ä–µ–∑ @getmyid_bot
   
3. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø–æ–ª—è –≤—ã—à–µ
4. –ù–∞–∂–º–∏—Ç–µ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
5. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ' –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
        
        info_label = ttk.Label(info_frame, text=info_text, justify=tk.LEFT, font=('Arial', 10))
        info_label.pack()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è
        config_frame.columnconfigure(0, weight=1)
    
    def setup_logs_tab(self, notebook):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ –ª–æ–≥–æ–≤"""
        logs_frame = ttk.Frame(notebook, padding="10")
        notebook.add(logs_frame, text="–õ–æ–≥–∏")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ttk.Label(logs_frame, text="–õ–æ–≥–∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", 
                 font=('Arial', 14, 'bold')).pack(pady=(0, 10))
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞–º–∏
        log_buttons_frame = ttk.Frame(logs_frame)
        log_buttons_frame.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Button(log_buttons_frame, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏", 
                  command=self.clear_logs).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(log_buttons_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏", 
                  command=self.save_logs).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(log_buttons_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", 
                  command=self.refresh_logs).pack(side=tk.LEFT)
        
        # –ü–æ–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤
        self.log_text = scrolledtext.ScrolledText(logs_frame, wrap=tk.WORD, 
                                                 font=('Consolas', 10), 
                                                 bg='#1e1e1e', fg='#ffffff',
                                                 insertbackground='white')
        self.log_text.pack(fill=tk.BOTH, expand=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–æ–≤
        self.log_text.tag_config("INFO", foreground="#00ff00")
        self.log_text.tag_config("WARNING", foreground="#ffff00")
        self.log_text.tag_config("ERROR", foreground="#ff0000")
        self.log_text.tag_config("DEBUG", foreground="#00ffff")
    
    def setup_control_tab(self, notebook):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º"""
        control_frame = ttk.Frame(notebook, padding="20")
        notebook.add(control_frame, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ttk.Label(control_frame, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Telegram –±–æ—Ç–æ–º", 
                 font=('Arial', 16, 'bold')).pack(pady=(0, 30))
        
        # –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
        status_frame = ttk.LabelFrame(control_frame, text="–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞", padding="15")
        status_frame.pack(fill=tk.X, pady=(0, 20))
        
        self.bot_status_var = tk.StringVar()
        self.bot_status_var.set("üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        ttk.Label(status_frame, textvariable=self.bot_status_var, 
                 font=('Arial', 14, 'bold')).pack()
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_buttons_frame = ttk.Frame(control_frame)
        control_buttons_frame.pack(pady=20)
        
        self.start_btn = ttk.Button(control_buttons_frame, text="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", 
                                   command=self.start_bot, state=tk.NORMAL)
        self.start_btn.pack(side=tk.LEFT, padx=(0, 15))
        
        self.stop_btn = ttk.Button(control_buttons_frame, text="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞", 
                                  command=self.stop_bot, state=tk.DISABLED)
        self.stop_btn.pack(side=tk.LEFT, padx=(0, 15))
        
        self.restart_btn = ttk.Button(control_buttons_frame, text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", 
                                     command=self.restart_bot, state=tk.DISABLED)
        self.restart_btn.pack(side=tk.LEFT)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_info_frame = ttk.LabelFrame(control_frame, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", 
                                          padding="15")
        config_info_frame.pack(fill=tk.X, pady=20)
        
        self.config_info_var = tk.StringVar()
        self.config_info_var.set("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        ttk.Label(config_info_frame, textvariable=self.config_info_var, 
                 font=('Arial', 10)).pack()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.update_config_info()
    
    def toggle_token_visibility(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞"""
        if self.show_token_var.get():
            self.token_entry.config(show="")
        else:
            self.token_entry.config(show="*")
    
    def load_existing_config(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        config_path = self.get_config_path()
        if os.path.exists(config_path):
            try:
                with open(config_path, "r", encoding="utf-8") as f:
                    for line in f:
                        if "=" in line:
                            key, value = line.strip().split("=", 1)
                            if key == "TELEGRAM_BOT_TOKEN" and value:
                                self.token_entry.delete(0, tk.END)
                                self.token_entry.insert(0, value)
                            elif key == "TELEGRAM_CHAT_ID" and value:
                                self.chat_id_entry.delete(0, tk.END)
                                self.chat_id_entry.insert(0, value)
                self.status_var.set("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                self.update_config_info()
                self.logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            except Exception as e:
                self.status_var.set(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
                self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    def save_config(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        token = self.token_entry.get().strip()
        chat_id = self.chat_id_entry.get().strip()
        
        if not token or not chat_id:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±–∞ –ø–æ–ª—è.")
            self.logger.warning("–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É—Å—Ç–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return
        
        try:
            config_path = self.get_config_path()
            with open(config_path, "w", encoding="utf-8") as f:
                f.write(f"TELEGRAM_BOT_TOKEN={token}\n")
                f.write(f"TELEGRAM_CHAT_ID={chat_id}\n")
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            self.status_var.set("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            self.update_config_info()
            self.logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª: {e}")
            self.status_var.set("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    def test_config(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        token = self.token_entry.get().strip()
        chat_id = self.chat_id_entry.get().strip()
        
        if not token or not chat_id:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±–∞ –ø–æ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
            return
        
        issues = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
        if ':' not in token:
            issues.append("–¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–∏–º–≤–æ–ª ':'")
        
        if len(token) < 35:
            issues.append("–¢–æ–∫–µ–Ω —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ chat_id
        if not chat_id.lstrip('-').isdigit():
            issues.append("Chat ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (–º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '-')")
        
        if issues:
            messagebox.showwarning("–ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π", "\n".join(issues))
            self.logger.warning(f"–ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π: {', '.join(issues)}")
        else:
            messagebox.showinfo("–ü—Ä–æ–≤–µ—Ä–∫–∞", "–ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ø—Ä–æ–π–¥–µ–Ω–∞!")
            self.logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ –±–∞–∑–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É")
        
        self.status_var.set("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    def clear_fields(self):
        """–û—á–∏—â–∞–µ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞"""
        self.token_entry.delete(0, tk.END)
        self.chat_id_entry.delete(0, tk.END)
        self.status_var.set("–ü–æ–ª—è –æ—á–∏—â–µ–Ω—ã")
        self.update_config_info()
        self.logger.info("–ü–æ–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—á–∏—â–µ–Ω—ã")
    
    def update_config_info(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        config_path = self.get_config_path()
        if os.path.exists(config_path):
            try:
                with open(config_path, "r", encoding="utf-8") as f:
                    lines = f.readlines()
                    token_set = any(line.startswith("TELEGRAM_BOT_TOKEN=") and len(line.strip()) > len("TELEGRAM_BOT_TOKEN=") for line in lines)
                    chat_id_set = any(line.startswith("TELEGRAM_CHAT_ID=") and len(line.strip()) > len("TELEGRAM_CHAT_ID=") for line in lines)
                    
                    if token_set and chat_id_set:
                        self.config_info_var.set("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
                    else:
                        missing = []
                        if not token_set:
                            missing.append("—Ç–æ–∫–µ–Ω")
                        if not chat_id_set:
                            missing.append("chat_id")
                        self.config_info_var.set(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {', '.join(missing)}")
            except:
                self.config_info_var.set("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        else:
            self.config_info_var.set("‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")

    async def run_bot_async(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            config = load_config(self.get_config_path())
            token = config["TELEGRAM_BOT_TOKEN"]
            
            # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
            self.bot = Bot(
                token=token
            )
            self.dp = Dispatcher()
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            register_handlers(self.dp, self.bot)
            
            self.logger.info("Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling
            await self.dp.start_polling(self.bot)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            # –û–±–Ω–æ–≤–ª—è–µ–º UI –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.root.after(0, self._bot_error_callback, str(e))

    def _bot_error_callback(self, error_msg):
        """Callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        self.is_bot_running = False
        self.bot_status_var.set("‚ùå –û—à–∏–±–∫–∞")
        self.start_btn.config(state=tk.NORMAL)
        self.stop_btn.config(state=tk.DISABLED)
        self.restart_btn.config(state=tk.DISABLED)
        self.status_var.set(f"–û—à–∏–±–∫–∞ –±–æ—Ç–∞: {error_msg}")

    def start_bot_thread(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        def run_bot():
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
            self.bot_loop = asyncio.new_event_loop()
            asyncio.set_event_loop(self.bot_loop)
            
            try:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
                self.bot_loop.run_until_complete(self.run_bot_async())
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –±–æ—Ç–∞: {e}")
            finally:
                self.bot_loop.close()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        bot_thread = threading.Thread(target=run_bot, daemon=True)
        bot_thread.start()
    
    def start_bot(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        self.logger.info("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_path = self.get_config_path()
        if not os.path.exists(config_path):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é!")
            return
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞
            config = load_config(config_path)
            if not config.get("TELEGRAM_BOT_TOKEN") or not config.get("TELEGRAM_CHAT_ID"):
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è!")
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º UI
            self.is_bot_running = True
            self.bot_status_var.set("üü° –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
            self.start_btn.config(state=tk.DISABLED)
            self.status_var.set("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.start_bot_thread()
            
            # –î–∞–µ–º –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –∑–∞–ø—É—Å–∫ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            self.root.after(2000, self._update_bot_started_status)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: {e}")
            self.is_bot_running = False
            self.bot_status_var.set("üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            self.start_btn.config(state=tk.NORMAL)

    def _update_bot_started_status(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
        if self.is_bot_running:
            self.bot_status_var.set("üü¢ –ó–∞–ø—É—â–µ–Ω")
            self.stop_btn.config(state=tk.NORMAL)
            self.restart_btn.config(state=tk.NORMAL)
            self.status_var.set("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            self.logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    
    def stop_bot(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞"""
        self.logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        
        try:
            self.is_bot_running = False
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞ –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if self.bot_loop and not self.bot_loop.is_closed():
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É –≤ event loop –±–æ—Ç–∞
                asyncio.run_coroutine_threadsafe(self._stop_bot_async(), self.bot_loop)
                
                # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                self.root.after(1000, self._update_bot_stopped_status)
            else:
                self._update_bot_stopped_status()
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}")
            self._update_bot_stopped_status()

    async def _stop_bot_async(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        try:
            if self.bot:
                await self.bot.session.close()
                self.logger.info("–°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞: {e}")

    def _update_bot_stopped_status(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç UI –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞"""
        self.bot_status_var.set("üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        self.start_btn.config(state=tk.NORMAL)
        self.stop_btn.config(state=tk.DISABLED)
        self.restart_btn.config(state=tk.DISABLED)
        self.status_var.set("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        self.logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def restart_bot(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        self.logger.info("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        self.stop_bot()
        self.root.after(2000, self.start_bot)  # –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    
    def clear_logs(self):
        """–û—á–∏—â–∞–µ—Ç –ª–æ–≥–∏"""
        self.log_text.delete(1.0, tk.END)
        self.logger.info("–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã")
    
    def save_logs(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª"""
        try:
            logs_content = self.log_text.get(1.0, tk.END)
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"logs_{timestamp}.txt"
            
            with open(filename, "w", encoding="utf-8") as f:
                f.write(logs_content)
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
            self.logger.info(f"–õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏: {e}")
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
    
    def refresh_logs(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–æ–≤"""
        self.logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–≥–æ–≤...")
    
    def update_logs(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ª–æ–≥–∏ –≤ GUI"""
        try:
            while True:
                try:
                    log_entry = self.log_queue.get_nowait()
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∞ –¥–ª—è —Ä–∞—Å–∫—Ä–∞—Å–∫–∏
                    tag = "INFO"
                    if "WARNING" in log_entry:
                        tag = "WARNING"
                    elif "ERROR" in log_entry:
                        tag = "ERROR"
                    elif "DEBUG" in log_entry:
                        tag = "DEBUG"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
                    self.log_text.insert(tk.END, log_entry + "\n", tag)
                    self.log_text.see(tk.END)
                    
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000)
                    lines = int(self.log_text.index('end-1c').split('.')[0])
                    if lines > 1000:
                        self.log_text.delete(1.0, f"{lines-1000}.0")
                        
                except queue.Empty:
                    break
        except:
            pass
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        self.root.after(100, self.update_logs)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
        self.root.mainloop()
    
    def on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if self.is_bot_running:
            if messagebox.askokcancel("–í—ã—Ö–æ–¥", "–ë–æ—Ç –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ –∏ –≤—ã–π—Ç–∏?"):
                self.stop_bot()
                # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –±–æ—Ç–∞
                self.root.after(1500, self.root.destroy)
        else:
            self.logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
            self.root.destroy()

if __name__ == "__main__":
    app = TelegramBotApp()
    app.run()