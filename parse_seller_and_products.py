import logging
from parser.ozon_parser import OzonSellerParser
from parser.seller_products_parser import OzonProductParser

logger = logging.getLogger('parse_seller_and_products')

def parse_seller_and_products(seller_url, headless=True, callback=None):
    try:
        # –ü–∞—Ä—Å–∏–Ω–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥–∞–≤—Ü–µ
        seller_parser = OzonSellerParser(headless=headless)
        seller_result = seller_parser.parse_seller(seller_url)
        
        # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥–∞–≤—Ü–µ
        if callback:
            seller_info = (
                "‚úì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥–∞–≤—Ü–µ:\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {seller_result.get('name', 'N/A')}\n"
                f"Premium: {'–î–∞' if seller_result.get('is_premium') else '–ù–µ—Ç'}\n"
                f"–ó–∞–∫–∞–∑–æ–≤: {seller_result.get('orders_count', 'N/A')}\n"
                f"–†–∞–±–æ—Ç–∞–µ—Ç —Å: {seller_result.get('working_since', 'N/A')}\n"
            )
            callback(seller_info)
        
        # –ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤
        product_parser = OzonProductParser(headless=headless)
        success,excel_path = product_parser.parse_products(seller_url)
        
        # # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        # if isinstance(product_result, bool):
        #     # –ï—Å–ª–∏ –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ
        #     success = product_result
        #     excel_path = getattr(product_parser, 'excel_path', '') if hasattr(product_parser, 'excel_path') else ''
        # elif isinstance(product_result, dict):
        #     # –ï—Å–ª–∏ –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å
        #     success = product_result.get('success', False)
        #     excel_path = product_result.get('excel_path', '')
        # else:
        #     # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        #     logger.warning(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç parse_products: {type(product_result)}")
        #     success = False
        #     excel_path = ''
        
        print(success , 'success')
        print(excel_path , 'excel_path')
        
        return {
            'seller': seller_result,
            'products': product_parser.get_products(),
            'excel_path': excel_path,
            'success': success
        }
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        if callback:
            callback(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return {
            'success': False,
            'error': str(e)
        }