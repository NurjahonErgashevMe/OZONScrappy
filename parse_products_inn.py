import logging
from parser.product_inn_parser import ProductINNParser

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)

def run_product_inn_parser():
    """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –∏–∑ —Ç–æ–≤–∞—Ä–æ–≤"""
    parser = None
    
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –∏–∑ —Ç–æ–≤–∞—Ä–æ–≤ Ozon")
        print("üìÅ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª products.txt –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞")
        print("üîó –í —Ñ–∞–π–ª–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä—ã Ozon (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É)")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞
        parser = ProductINNParser()  # headless=True –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ —Ñ–æ–Ω–µ
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ products.txt
        product_urls = parser.load_product_urls()
        if not product_urls:
            print("‚ùå –§–∞–π–ª products.txt –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç!")
            print("üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª products.txt –∏ –¥–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä—ã Ozon")
            print("   –ü—Ä–∏–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ:")
            print("   https://www.ozon.ru/product/example-1/")
            print("   https://www.ozon.ru/product/example-2/")
            return
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(product_urls)} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
        print("‚è±Ô∏è  –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ~{:.1f} –º–∏–Ω—É—Ç".format(len(product_urls) * 0.5))
        
        # –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
        success = parser.parse_all_products()
        
        if success and parser.results:
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            filepath = parser.save_to_excel()
            
            # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            print("\n" + "="*70)
            print("üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–ê–†–°–ò–ù–ì–ê –ü–†–û–î–ê–í–¶–û–í")
            print("="*70)
            
            total = len(parser.results)
            inn_found = len([r for r in parser.results if r['inn'] not in ['–ù–µ –Ω–∞–π–¥–µ–Ω–æ', '–û—à–∏–±–∫–∞']])
            seller_found = len([r for r in parser.results if r['seller_name'] not in ['–ù–µ –Ω–∞–π–¥–µ–Ω–æ', '–û—à–∏–±–∫–∞']])
            company_found = len([r for r in parser.results if r['company_name'] not in ['–ù–µ –Ω–∞–π–¥–µ–Ω–æ', '–û—à–∏–±–∫–∞']])
            
            print(f"üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total}")
            print(f"üè™ –ü—Ä–æ–¥–∞–≤–µ—Ü –Ω–∞–π–¥–µ–Ω —É: {seller_found} —Ç–æ–≤–∞—Ä–æ–≤ ({(seller_found/total*100):.1f}%)")
            print(f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω–∞ —É: {company_found} —Ç–æ–≤–∞—Ä–æ–≤ ({(company_found/total*100):.1f}%)")
            print(f"üÜî –ò–ù–ù –Ω–∞–π–¥–µ–Ω —É: {inn_found} —Ç–æ–≤–∞—Ä–æ–≤ ({(inn_found/total*100):.1f}%)")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            successful_results = [r for r in parser.results if r['inn'] not in ['–ù–µ –Ω–∞–π–¥–µ–Ω–æ', '–û—à–∏–±–∫–∞']]
            if successful_results:
                print(f"\nüéØ –ü—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
                for i, result in enumerate(successful_results[:3], 1):
                    print(f"\n  {i}. –ü—Ä–æ–¥–∞–≤–µ—Ü: {result['seller_name']}")
                    print(f"     –ö–æ–º–ø–∞–Ω–∏—è: {result['company_name']}")
                    print(f"     –ò–ù–ù: {result['inn']}")
                    print(f"     –¢–æ–≤–∞—Ä: {result['product_url']}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –±–µ–∑ –ò–ù–ù
            failed_results = [r for r in parser.results if r['inn'] in ['–ù–µ –Ω–∞–π–¥–µ–Ω–æ', '–û—à–∏–±–∫–∞']]
            if failed_results:
                print(f"\n‚ö†Ô∏è  –¢–æ–≤–∞—Ä—ã –±–µ–∑ –ò–ù–ù ({len(failed_results)} —à—Ç.):")
                for i, result in enumerate(failed_results[:3], 1):
                    print(f"  {i}. –ü—Ä–æ–¥–∞–≤–µ—Ü: {result['seller_name']}")
                if len(failed_results) > 3:
                    print(f"     ... –∏ –µ—â–µ {len(failed_results) - 3} —Ç–æ–≤–∞—Ä–æ–≤")
            
            if filepath:
                print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filepath}")
            
            print("‚ú® –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            
        else:
            print("‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏ –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        if parser:
            parser.close()
            print("üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")

def create_sample_products_file():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ products.txt"""
    sample_content = """# –ü—Ä–∏–º–µ—Ä—ã —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ç–æ–≤–∞—Ä—ã Ozon
# –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
# –ö–∞–∂–¥–∞—è —Å—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ

https://www.ozon.ru/product/example-product-1/
https://www.ozon.ru/product/example-product-2/
https://www.ozon.ru/product/example-product-3/

# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Å—ã–ª–∫–∏ –≤–µ–¥—É—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
# –§–æ—Ä–º–∞—Ç: https://www.ozon.ru/product/–Ω–∞–∑–≤–∞–Ω–∏–µ-—Ç–æ–≤–∞—Ä–∞-–∞—Ä—Ç–∏–∫—É–ª/
"""
    
    try:
        with open('products_sample.txt', 'w', encoding='utf-8') as f:
            f.write(sample_content)
        print("üìù –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª products_sample.txt —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ —Å—Å—ã–ª–æ–∫")
        print("üìã –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ –≤ products.txt –∏ –∑–∞–º–µ–Ω–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ø—Ä–∏–º–µ—Ä–∞: {e}")

if __name__ == "__main__":
    print("="*70)
    print("üîç –ü–ê–†–°–ï–† –ü–†–û–î–ê–í–¶–û–í –ò–ó –¢–û–í–ê–†–û–í OZON")
    print("="*70)
    
    import os
    if not os.path.exists('products.txt'):
        print("üìÅ –§–∞–π–ª products.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("ü§î –•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏? (y/n): ", end="")
        
        try:
            choice = input().lower().strip()
            if choice in ['y', 'yes', '–¥–∞', '–¥']:
                create_sample_products_file()
                print("\n‚ö†Ô∏è  –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª products.txt –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞")
            else:
                print("üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª products.txt —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ —Ç–æ–≤–∞—Ä—ã –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞")
        except KeyboardInterrupt:
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    else:
        run_product_inn_parser()